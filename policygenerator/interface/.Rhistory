}
if (is.na(LGA))
{
LGA<- Inf
}
if (is.na(EWR))
{
EWR<- Inf
}
if (min(JFK,LGA,EWR)==EWR)
{
return ("EWR")
}
else if (min(JFK,LGA,EWR)==LGA)
{
return ("LGA")
}
else if (min(JFK,LGA,EWR)==JFK)
{
return ("JFK")
}
}
sampleFlights$dest=="LAX"
closestAirport()
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime(""JFK","LAX")
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime("JFK","LAX")
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime("EWR","LAX")
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime("LGA","LAX")
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
mean(airtime("LGA","LAX"), na.rm=TRUE)
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime()
closestAirport<-function(destinationPort="RDU")
{
fromJFK<-airtime("JFK",destinationPort)
fromLGA<-airtime("LGA",destinationPort)
fromEWR<-airtime("EWR",destinationPort)
if (is.nan(fromJFK))
{
fromJFK<- Inf
}
if (is.nan(fromLGA))
{
fromLGA<- Inf
}
if (is.nan(fromEWR))
{
fromEWR<- Inf
}
JFK<-mean(fromJFK, na.rm = TRUE)
LGA<-mean(fromLGA, na.rm = TRUE)
EWR<-mean(fromEWR, na.rm = TRUE)
if (min(JFK,LGA,EWR)==EWR)
{
return ("EWR")
}
else if (min(JFK,LGA,EWR)==LGA)
{
return ("LGA")
}
else if (min(JFK,LGA,EWR)==JFK)
{
return ("JFK")
}
}
#closestAirport()
#closestAirport("RDU")
closestAirport("LAX")
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
is.nan(airtime("LGA","LAX"))
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime("LGA","LAX")==NULL
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime("LGA","LAX")
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime()
closestAirport<-function(destinationPort="RDU")
{
fromJFK<-airtime("JFK",destinationPort)
fromLGA<-airtime("LGA",destinationPort)
fromEWR<-airtime("EWR",destinationPort)
if (is.null(fromJFK))
{
fromJFK<- Inf
}
if (is.null(fromLGA))
{
fromLGA<- Inf
}
if (is.null(fromEWR))
{
fromEWR<- Inf
}
JFK<-mean(fromJFK, na.rm = TRUE)
LGA<-mean(fromLGA, na.rm = TRUE)
EWR<-mean(fromEWR, na.rm = TRUE)
if (min(JFK,LGA,EWR)==EWR)
{
return ("EWR")
}
else if (min(JFK,LGA,EWR)==LGA)
{
return ("LGA")
}
else if (min(JFK,LGA,EWR)==JFK)
{
return ("JFK")
}
}
#closestAirport()
#closestAirport("RDU")
closestAirport("LAX")
closestAirport<-function(destinationPort="RDU")
{
fromJFK<-airtime("JFK",destinationPort)
fromLGA<-airtime("LGA",destinationPort)
fromEWR<-airtime("EWR",destinationPort)
if (is.null(fromJFK))
{
fromJFK<- Inf
}
if (is.null(fromLGA))
{
fromLGA<- Inf
}
if (is.null(fromEWR))
{
fromEWR<- Inf
}
JFK<-mean(fromJFK, na.rm = TRUE)
LGA<-mean(fromLGA, na.rm = TRUE)
EWR<-mean(fromEWR, na.rm = TRUE)
if (min(JFK,LGA,EWR)==EWR)
{
return ("EWR")
}
else if (min(JFK,LGA,EWR)==LGA)
{
return ("LGA")
}
else if (min(JFK,LGA,EWR)==JFK)
{
return ("JFK")
}
}
closestAirport()
closestAirport("RDU")
closestAirport("LAX")
recommendedAirpot<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirpot)<-c("desination","origin")
airport_list=unique(sampleFlights$dest)
for (i in airport_list)
{
recommendedAirpot$destination[count]<-i
recommendedAirpot$origin<-closestAirport(i)
}
recommendedAirpot<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirpot)<-c("desination","origin")
airport_list=unique(sampleFlights$dest)
for (i in airport_list)
{
recommendedAirpot$destination<-i
recommendedAirpot$origin<-closestAirport(i)
}
recommendedAirpot
recommendedAirpot<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirpot)<-c("desination","origin")
airport_list=unique(sampleFlights$dest)
for (i in airport_list)
{
recommendedAirpot$destination<-i
recommendedAirpot$origin<-closestAirport(i)
}
recommendedAirpot<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirpot)<-c("destination","origin")
airport_list=unique(sampleFlights$dest)
for (i in airport_list)
{
recommendedAirpot$destination<-i
recommendedAirpot$origin<-closestAirport(i)
}
recommendedAirpot<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirpot)<-c("destination","origin")
airport_list=unique(sampleFlights$dest)
for (i in airport_list)
{
recommendedAirpot$destination<-i
recommendedAirpot$origin<-closestAirport(i)
}
recommendedAirpot$destination[1]
recommendedAirpot$destination[2]
recommendedAirpot$destination
recommendedAirpot<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirpot)<-c("destination","origin")
airport_list=unique(sampleFlights$dest)
count<-0
for (i in airport_list)
{
recommendedAirpot$destination[count]<-i
recommendedAirpot$origin[count]<-closestAirport(i)
count<-count+1
}
recommendedAirport
recommendedAirpot
#REPLACE netid WITH YOUR NETID and DO NOT CHANGE ANY OTHER PART OF THIS CODE CHUNK (that is, just run it).
myNetID = "ry89"
paste("Success! This program will use", myNetID, "as your netid.")
#REPLACE netid WITH YOUR NETID and DO NOT CHANGE ANY OTHER PART OF THIS CODE CHUNK (that is, just run it).
myNetID = "ry89"
paste("Success! This program will use", myNetID, "as your netid.")
allFlights = read.csv("nycflights.csv")
allFlights
#DO NOT CHANGE ANY PART OF THIS CODE CHUNK (that is, just run it).
examVersion = 3
SAMPLESIZE = 50000
splitted = strsplit(myNetID, "")
seed = nchar(myNetID)
isnumber = c()
myNetLetters = c()
for (i in 1:nchar(myNetID)) {
isnumber = c(isnumber, is.numeric(splitted[[1]][i]))
myNetLetters = c(myNetLetters, splitted[[1]][i])
}
if (FALSE == (("0" <= myNetLetters[nchar(myNetID)]) & (myNetLetters[nchar(myNetID)] <= "9"))) {
myNetLetters[nchar(myNetID)] = "0"
}
check = c()
seed = 2*(as.numeric(myNetLetters[nchar(myNetID)]) + seed)/2 - nchar(myNetID)
distance = ( (seed-1) %% 4 + 1)*100
set.seed(seed + examVersion)
flighttrain = sample(1:nrow(allFlights), size = SAMPLESIZE*2, replace = FALSE)
middle = 0.222
stddev = middle/3.012
base = c(9.58, 19.19, 30.97, 45.28)
sampleFlights = allFlights[flighttrain,]
sampleFlights = sampleFlights[sampleFlights$carrier != "OO",]
sampleFlights = sampleFlights[1:SAMPLESIZE,]
paste("Success! Customized sampleFlights dataframe with", nrow(sampleFlights), "rows is successfully generated!")
EWR2RDU<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin=="EWR" & sampleFlights[i,]$dest=="RDU")
{
EWR2RDU<-c(EWR2RDU,sampleFlights[i,]$air_time)
}
}
EWR2RDU
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime()
closestAirport<-function(destinationPort="RDU")
{
fromJFK<-airtime("JFK",destinationPort)
fromLGA<-airtime("LGA",destinationPort)
fromEWR<-airtime("EWR",destinationPort)
if (is.null(fromJFK))
{
fromJFK<- Inf
}
if (is.null(fromLGA))
{
fromLGA<- Inf
}
if (is.null(fromEWR))
{
fromEWR<- Inf
}
JFK<-mean(fromJFK, na.rm = TRUE)
LGA<-mean(fromLGA, na.rm = TRUE)
EWR<-mean(fromEWR, na.rm = TRUE)
if (min(JFK,LGA,EWR)==EWR)
{
return ("EWR")
}
else if (min(JFK,LGA,EWR)==LGA)
{
return ("LGA")
}
else if (min(JFK,LGA,EWR)==JFK)
{
return ("JFK")
}
}
closestAirport()
closestAirport("RDU")
closestAirport("LAX")
recommendedAirport<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirport)<-c("destination","origin")
airport_list=unique(sampleFlights$dest)
count<-1
for (i in airport_list)
{
recommendedAirport$destination[count]<-i
recommendedAirport$origin[count]<-closestAirport(i)
count<-count+1
}
recommendedAirport<-data.frame(matrix(nrow=105, ncol=2))
colnames(recommendedAirport)<-c("destination","origin")
airport_list=unique(sampleFlights$dest)
count<-1
for (i in airport_list)
{
recommendedAirport$destination[count]<-i
recommendedAirport$origin[count]<-closestAirport(i)
count<-count+1
}
recommendedAirport
#this shows that it works for Q8 just my computer too slow
recommendedAirport
# Chunk 1. Generated knit setting
knitr::opts_chunk$set(echo = TRUE)
#REPLACE netid WITH YOUR NETID and DO NOT CHANGE ANY OTHER PART OF THIS CODE CHUNK (that is, just run it).
myNetID = "ry89"
paste("Success! This program will use", myNetID, "as your netid.")
allFlights = read.csv("nycflights.csv")
allFlights
#DO NOT CHANGE ANY PART OF THIS CODE CHUNK (that is, just run it).
examVersion = 3
SAMPLESIZE = 50000
splitted = strsplit(myNetID, "")
seed = nchar(myNetID)
isnumber = c()
myNetLetters = c()
for (i in 1:nchar(myNetID)) {
isnumber = c(isnumber, is.numeric(splitted[[1]][i]))
myNetLetters = c(myNetLetters, splitted[[1]][i])
}
if (FALSE == (("0" <= myNetLetters[nchar(myNetID)]) & (myNetLetters[nchar(myNetID)] <= "9"))) {
myNetLetters[nchar(myNetID)] = "0"
}
check = c()
seed = 2*(as.numeric(myNetLetters[nchar(myNetID)]) + seed)/2 - nchar(myNetID)
distance = ( (seed-1) %% 4 + 1)*100
set.seed(seed + examVersion)
flighttrain = sample(1:nrow(allFlights), size = SAMPLESIZE*2, replace = FALSE)
middle = 0.222
stddev = middle/3.012
base = c(9.58, 19.19, 30.97, 45.28)
sampleFlights = allFlights[flighttrain,]
sampleFlights = sampleFlights[sampleFlights$carrier != "OO",]
sampleFlights = sampleFlights[1:SAMPLESIZE,]
paste("Success! Customized sampleFlights dataframe with", nrow(sampleFlights), "rows is successfully generated!")
EWR2RDU<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin=="EWR" & sampleFlights[i,]$dest=="RDU")
{
EWR2RDU<-c(EWR2RDU,sampleFlights[i,]$air_time)
}
}
EWR2RDU
airtime<-function(originPort="EWR",destionationPort="RDU"){
answer<-c()
for (i in 1:nrow(sampleFlights))
{
if (sampleFlights[i,]$origin==originPort & sampleFlights[i,]$dest==destionationPort)
{
answer<-c(answer,sampleFlights[i,]$air_time)
}
}
return (answer)
}
airtime()
closestAirport<-function(destinationPort="RDU")
{
fromJFK<-airtime("JFK",destinationPort)
fromLGA<-airtime("LGA",destinationPort)
fromEWR<-airtime("EWR",destinationPort)
if (is.null(fromJFK))
{
fromJFK<- Inf
}
if (is.null(fromLGA))
{
fromLGA<- Inf
}
if (is.null(fromEWR))
{
fromEWR<- Inf
}
JFK<-mean(fromJFK, na.rm = TRUE)
LGA<-mean(fromLGA, na.rm = TRUE)
EWR<-mean(fromEWR, na.rm = TRUE)
if (min(JFK,LGA,EWR)==EWR)
{
return ("EWR")
}
else if (min(JFK,LGA,EWR)==LGA)
{
return ("LGA")
}
else if (min(JFK,LGA,EWR)==JFK)
{
return ("JFK")
}
}
closestAirport()
closestAirport("RDU")
closestAirport("LAX")
